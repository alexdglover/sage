{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Sage Documentation","text":"<p>Welcome to the official documentation for Sage, your personal finance app.</p> <ul> <li>For end users: Get started by reading the Introduction to learn what Sage can do for you.</li> <li>For contributors: Begin with the Overview to find out how you can help improve Sage.</li> </ul> <p>Use the navigation on the left to explore detailed guides and resources.</p>"},{"location":"design/","title":"Architecture","text":""},{"location":"design/#basic-concepts","title":"Basic concepts","text":"<p>Intuit's Mint offered reporting on several personal finance aspects: * List of all transactions across all accounts and financial institutions * Assets, liabilities, and net worth over time * Monthly spending by category, or by other dimensions * Monthly spending over time * Income over time * Net income over time</p> <p>While Mint was extremely useful, you only need two types of data to achieve all of the reporting listed above. Namely, you need * Every individual transaction. This provides the data needed for a searchable list of transcations, reporting on income/spending by category or other dimensions, and spending/income over time * Balances for each account. This provides the data needed for tracking assets, liabilities, and net worth over time</p> <p>By using these two data sets, Sage is much simpler than a true accounting  application. We don't need to worry about double entry accounting, or keeping a perfect ledger to calculate the current balance for an account. Instead, balances are treated as a separate data set that won't necessarily reconcile with transactions. As a reporting tool, this is a reasonable tradeoff. While this simplifies the application logic, it puts the burden of recording the balances on the end user.</p>"},{"location":"design/#a-note-on-balances","title":"A note on balances","text":"<p>Statements from financial institutions don't perfectly align with the first and last day of the month. For example, a statement may be for the period of March 15 to April 14. However, a balance is a snapshot in time - it is not a window of time. A statement ending on April 14 shows the balance as of April 14. Even though the balance is for a specific date, Sage (and humans in general) consider this the balance for the month of April.</p> <p>Sage treats balances as sparse data so that accounts don't need to be constantly updated, especially accounts that don't change frequently (like your car or house for example). To accomplish this, Sage will use the most recent balance within a given timeframe. For example, if an account had a balance defined for October 2 and October 17, the balance for October 17 would be displayed when viewing the balance for October. If there is no balance newer than October 17, then Sage will show this same balance for November, December, and so on until a newer balance is added.</p> <p>Sage reports on balances by month and year (\"year-months\"), such as January 2024. To do this, Sage uses the following logic to group balances by month and year:</p> <ol> <li>Define all year-months requested in a report</li> <li>Query the balances table for each year-month. The balance for a given year-month is the balance with the most recent date that is before the end date of the given month.</li> </ol> <p>This captures all balances while handling discrepancies in when a balance starts or ends.</p>"},{"location":"design/#entities-and-relationships","title":"Entities and Relationships","text":"<p>Note: the ER diagram and SQL scripts are for illustrative purposes. Mermaid doesn't support the same types as sqlite or Go, and the SQL scripts below will be replaced by GORM.</p> <pre><code>erDiagram\n    ACCOUNT {\n        int    id\n        string name\n        string account_type \n        string charge_type\n    }\n    CATEGORY {\n        int    id\n        string name\n    }\n    TRANSACTION {\n        int id\n        int date\n        string description\n        float amount\n        string excluded\n        int account_fk\n        int category_fk\n    }\n    BALANCE {\n        int id\n        string date\n        string effective_start_date\n        string effective_end_date\n        float balance\n        int account_fk\n    }\n    BUDGET {\n        int id\n        string name\n        float amount\n        int category_fk\n    }\n\n    ACCOUNT ||--o{ TRANSACTION : contains\n    ACCOUNT ||--o{ BALANCE : has\n    TRANSACTION }o--|| CATEGORY : belongs_to\n    BUDGET |o--||CATEGORY : applies_to\n</code></pre>"},{"location":"design/#sql-queries-for-use-cases","title":"SQL queries for use cases","text":"<pre><code>-- for the current month, show net income\nWITH assest_increases as(\n    SELECT sum(amount) as amount from transactions \n    where date &gt;= '2024-06-01' and date &lt; '2024-06-30'\n    and account_id in (select id from accounts where charge_type='asset')\n    and amount &gt;= 0\n),\nassest_decreases as(\n    SELECT sum(amount) as amount from transactions \n    where date &gt;= '2024-06-01' and date &lt; '2024-06-30'\n    and account_id in (select id from accounts where charge_type='asset')\n    and amount &lt; 0\n),\nliability_increases as(\n    SELECT sum(amount) as amount from transactions \n    where date &gt;= '2024-06-01' and date &lt; '2024-06-30'\n    and account_id in (select id from accounts where charge_type='liability')\n    and amount &gt;= 0\n),\nliability_decreases as(\n    SELECT sum(amount) as amount from transactions \n    where date &gt;= '2024-06-01' and date &lt; '2024-06-30'\n    and account_id in (select id from accounts where charge_type='liability')\n    and amount &lt; 0\n)\n\nselect COALESCE(ai.amount, 0) + COALESCE(ld.amount, 0) AS income, COALESCE(ad.amount, 0) + COALESCE(li.amount, 0) AS expenses\nfrom assest_increases ai join assest_decreases ad join liability_increases li join liability_decreases ld;\n\n-- show net income by month\n-- using same `WITH` common table expressions as prevous example...\nselect COALESCE(ai.amount, 0) + COALESCE(ld.amount, 0) AS income, COALESCE(ad.amount, 0) + COALESCE(li.amount, 0) AS expenses, strftime('%Y-%m') as yearmonth\nfrom assest_increases ai join assest_decreases ad join liability_increases li join liability_decreases ld\nGROUP BY yearmonth;\n\n\n-- get balances (as a SCD) that have already started\nSELECT id, effective_start_date , (effective_start_date &lt; date('now')) AS balance_started from balances WHERE balance_started=1;\n\n\n-- get balances (as a SCD) that have not yet expired\nSELECT id, effective_end_date, ((effective_end_date &gt; date('now')) or (effective_end_date is null)) AS balance_not_ended from balances WHERE balance_not_ended=1;\n\n-- combine the two to get active balances\nWITH started AS (\n    SELECT * , (effective_start_date &lt; date('now')) AS balance_started from balances WHERE balance_started=1\n),\nnot_ended AS (\n    SELECT *, ((effective_end_date &gt; date('now')) or (effective_end_date is null)) AS balance_not_ended from balances WHERE balance_not_ended=1   \n)\nSELECT s.id, s.amount FROM started s JOIN not_ended n ON s.id=n.id;\n\n</code></pre>"},{"location":"design/#importing-data","title":"Importing data","text":"<ol> <li>User clicks on \"Import statement\" in the UI. An import form is presented, with a file picker and a submit button.</li> <li>On submit, the file is POSTed to an endpoint. This endpoint calls a service class.</li> <li>The service class hashes the file. It then checks if the hash already exists in the <code>statementSubmissions</code> table. If it finds a matching hash, it rejects the statement because it has already been processed</li> <li>Service class invokes a parser function, getting a list of transactions and balances in return. For each transaction, compute a hash of the account ID, amount, date, and description. </li> </ol>"},{"location":"design/#budgets","title":"Budgets","text":"<p>A budget can be defined for any particular category or for all categories. By defining a budget on all categories, this provides a total spending budget.</p> <p>A budget has a per-month limit.</p> <pre><code>erDiagram\n    CATEGORY {\n        int    id\n        string name\n    }\n    BUDGET {\n        int id\n        id category_id\n        float amount\n    }\n</code></pre> <p>This model will allow us to handle the following use cases:</p> <pre><code>-- Get all budgets\nSELECT * FROM BUDGET;\n\n-- Get any budget that has been exceeded\nSELECT SUM(AMOUNT) as total_spend\nFROM transactions\nWHERE category_id = 1\nAND total_spend &gt; (\n    SElECT amount \n    FROM budgets\n    WHERE category_id = 1\n)\n</code></pre>"},{"location":"design/#categorization","title":"Categorization","text":"<p>To show spending by categories, every transaction needs to be assigned to a category. Sage achieves this in two ways. First, users can manually edit any transaction and set the category. Second, Sage uses the gopherml/bag module to automatically categorize transactions using a Naive Bayes classifier machine learning model, which is trained on the transactions that have been previously categorized manually by the user. This approach gives the user full control while also limiting the toil and burden associated with categorizing transactions.</p> <p>There is an open question about whether some initial rules should be seeded into the model (to give some automatic classification on day 1) and whether they should be editable.</p>"},{"location":"design/#semver","title":"SEMVER","text":"<p>Once a stable version is released, the project will treat any breaking change to any public interface (either JSON APIs or database schema) as a breaking change.</p>"},{"location":"contributing/dev-setup/","title":"Development Setup","text":"<p>To set up your development environment for Sage:</p>"},{"location":"contributing/dev-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.23.0 (required)</li> <li>SQLite3 (for direct database access/testing)</li> </ul>"},{"location":"contributing/dev-setup/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install Go dependencies:</p> <pre><code>go mod tidy\n</code></pre>"},{"location":"contributing/dev-setup/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>DROP_TABLES</code>: If set, deletes all data from all tables (use with caution)</li> <li><code>ADD_SAMPLE_DATA</code>: If set, populates the database with sample data for testing</li> </ul>"},{"location":"contributing/dev-setup/#running-the-app-locally","title":"Running the App Locally","text":"<p>Start the application with:</p> <pre><code>go run main.go\n</code></pre> <p>Then open your browser to http://localhost:8080.</p>"},{"location":"contributing/dev-setup/#database-access","title":"Database Access","text":"<p>You can interact directly with the database using:</p> <pre><code>sqlite3 sage.db\n</code></pre> <p>Or, if your database is elsewhere:</p> <pre><code>sqlite3 ./path/to/sage.db.file\n</code></pre>"},{"location":"contributing/guidelines/","title":"Contribution Guidelines","text":"<p>To ensure a smooth contribution process, please follow these guidelines:</p> <ul> <li>CI Tests: Verify that all continuous integration (CI) tests pass on your pull request.</li> <li>Documentation: Add or update documentation for any major changes in functionality.</li> <li>Unit Tests: Include new or updated unit tests for new features or significant changes.</li> </ul> <p>We welcome contributions of all sizes! If you have questions, open an issue or start a discussion before submitting a pull request.</p>"},{"location":"contributing/overview/","title":"Contributing to Sage","text":"<p>Thank you for your interest in contributing to Sage! This section provides an overview of how to get started as a contributor, including development setup and contribution guidelines.</p> <p>Sage is an open-source personal finance app written in Go, with a Bootstrap 5 and HTMX-based frontend. Most of the backend uses Go's standard library.</p>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":"<p>Sage is a local-only application. No account or login is required. All your data stays on your device.</p>"},{"location":"user-guide/getting-started/#installation","title":"Installation","text":""},{"location":"user-guide/getting-started/#installation-walkthrough-video","title":"Installation walkthrough video","text":"<p>Installation is easy, except Apple made it a bit harder because of how application signing is enforced on newer versions of MacOS.</p>"},{"location":"user-guide/getting-started/#for-applemac-users","title":"For Apple/Mac users:","text":"<ol> <li>Create a new folder where you want to run Sage - <code>mkdir ~/sage &amp;&amp; cd ~/sage</code> for example</li> <li>Browse to <code>https://github.com/alexdglover/sage/releases/latest</code></li> <li>Select the right download for your computer, based on what operating system you use and whether your computer uses an Intel/x86 CPU or an ARM CPU.</li> <li>Right click on the link and copy the URL</li> <li>Download the file - <code>curl -L https://github.com/alexdglover/sage/releases/download/v1.1.2/sage_Darwin_arm64.tar.gz -o sage.tar.gz</code><ul> <li>Downloading the file this way bypasses MacOS' application signing requirement. You can't just click the link in your browser</li> </ul> </li> <li>Unpack the archive - <code>tar xvzf sage.tar.gz</code></li> </ol>"},{"location":"user-guide/getting-started/#for-windows-and-linux-users","title":"For Windows and Linux users","text":"<ol> <li>Create a new folder where you want to run Sage</li> <li>Browse to <code>https://github.com/alexdglover/sage/releases/latest</code></li> <li>Select the right download for your computer, based on what operating system you use and whether your computer uses an Intel/x86 CPU or an ARM CPU.</li> <li>Download the file (either via your browser or CLI) and unpack the archive</li> </ol>"},{"location":"user-guide/getting-started/#launching-the-app","title":"Launching the app","text":"<p>You can either launch the app from a CLI (<code>~/sage/sage</code>) or double click the icon. Launching the application will create a <code>sage.db</code> file in the same directory. All of your financial data is stored locally in the <code>sage.db</code> file. Remember to back up this file periodically to avoid data loss.</p>"},{"location":"user-guide/getting-started/#main-workflows","title":"Main Workflows","text":"<ul> <li>Add new accounts: Set up your financial accounts in Sage.</li> <li>Import statements: Bring in your transaction history using CSV files.</li> <li>Update balances: Keep your account balances current.</li> <li>Categorize transactions: Organize your spending for better insights.</li> <li>View reports: Analyze your finances with built-in reports.</li> </ul>"},{"location":"user-guide/importing-statements/","title":"Importing Statements","text":"<p>Sage supports importing transaction history from CSV files exported from your financial institutions.</p>"},{"location":"user-guide/importing-statements/#supported-institutions","title":"Supported Institutions","text":"<ul> <li>Chase (checking, savings, credit card)</li> <li>Charles Schwab (brokerage, checking)</li> <li>Fidelity (brokerage, credit card)</li> <li>Target (credit card)</li> <li>Bank of America (credit card)</li> <li>UW Credit Union (mortgage)</li> <li>Capital One (credit card, savings)</li> </ul> <p>Sage includes dedicated parsing logic for these institutions. Simply export your recent transaction history as a CSV from your bank\u2019s website and import it into Sage. No manual editing is typically required.</p> <p>If you encounter issues with a CSV, check that it matches the format exported by your institution. For unsupported formats, manual editing may be necessary.</p>"},{"location":"user-guide/introduction/","title":"Sage User Guide","text":"<p>Welcome to Sage, your personal finance app for understanding and managing your spending, income, and budgets. Sage is a local-only reporting tool that helps you make informed financial decisions without moving money or tracking investments.</p>"},{"location":"user-guide/introduction/#what-is-sage","title":"What is Sage?","text":"<p>Sage helps you:</p> <ul> <li>Understand how you are spending your money</li> <li>Track how your income and spending change over time</li> <li>Define and monitor budgets</li> <li>Receive actionable financial advice (e.g., which loans to pay off first)</li> </ul> <p>Sage does not connect to bank accounts or move money. It is strictly a reporting and analysis tool.</p>"},{"location":"user-guide/reports/","title":"Reports &amp; Insights","text":"<p>Sage provides a variety of reports and insights to help you understand your finances:</p> <ul> <li>Spending by Category: See where your money goes by category.</li> <li>Spending Over Time: Track your spending trends month-to-month.</li> <li>Net Income Over Time: Monitor your income minus expenses over time.</li> <li>In-Month Budget Tracking: Stay on top of your budget as you spend.</li> <li>6-Month Budget Statistical Analysis: Analyze your budget performance over the last six months.</li> <li>Net Worth Over Time: Watch your net worth grow (or shrink) over time.</li> </ul> <p>Access these reports from the main dashboard after importing your data and categorizing transactions.</p>"},{"location":"user-guide/security/","title":"Security &amp; Privacy","text":"<p>Sage is designed with privacy and security in mind:</p> <ul> <li>Local-Only Application: All your financial data stays on your device. Sage does not connect to the internet, move money, or sync with any external services.</li> <li>No Account Required: There is no login or account creation process.</li> <li>Data Storage: All data is stored in a local file named <code>sage.db</code>.</li> </ul>"},{"location":"user-guide/security/#user-responsibility","title":"User Responsibility","text":"<p>To ensure your data remains safe:</p> <ul> <li>Backup: Regularly back up your <code>sage.db</code> file to prevent data loss.</li> <li>Access: Only use Sage on trusted devices to keep your financial data secure.</li> </ul> <p>No data is ever shared or transmitted by Sage.</p>"}]}